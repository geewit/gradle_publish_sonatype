import java.nio.charset.StandardCharsets

ext {
    profile = System.getProperty("profile") ?: "development"
    println "profile = ${profile}"
}


apply plugin: 'java'
apply plugin: 'maven-publish'
apply from: 'https://gitee.com/geewit/gradle_publish_sonatype/raw/master/dependency-strategy.gradle'

buildDir = 'target'

repositories {
    mavenLocal()
    maven { url "https://maven.aliyun.com/repository/central" }
    maven { url "https://repo.maven.apache.org/maven2" }
    maven {
        url getReleaseRepositoryUrl()
        credentials {
            username = getRepositoryUsername()
            password = getRepositoryPassword()
        }
    }
    maven {
        url getSnapshotRepositoryUrl()
        credentials {
            username = getRepositoryUsername()
            password = getRepositoryPassword()
        }
    }
}

configurations {
    all { config ->
        config.exclude group: "org.apache.geronimo.specs"
        config.exclude group: "org.jboss.spec.javax.annotation"
        config.exclude group: "org.jboss.spec.javax.servlet"
        config.exclude group: "org.jboss.spec.javax.transaction"
        config.exclude group: "org.jboss.spec.javax.websocket"
        config.exclude group: "org.hibernate.javax.persistence"
        config.exclude group: "org.springframework.boot", module:"spring-boot-starter-logging"
        config.exclude group: "org.springframework.boot", module:"spring-boot-starter-tomcat"
        config.exclude group: "org.apache.tomcat", module:"tomcat-jdbc"
        config.exclude group: "org.apache.tomcat.embed"
        config.exclude group: "org.glassfish.hk2", module:"osgi-resource-locator"
        config.exclude group: "org.glassfish.hk2.external", module:"javax.inject"
        config.exclude group: "com.vaadin.external.google"
        config.exclude group: "com.zaxxer"
        config.exclude group: "org.codehaus.jackson"
        config.exclude group: "org.codehaus.jettison"
        config.exclude group: "org.slf4j", module:"slf4j-log4j12"
        if (profile != 'development') {
            config.exclude group: "org.springframework.boot", module:"spring-boot-devtools"
        }
        resolutionStrategy.eachDependency { details ->
            resolutionStrategy(details)
        }
    }
}

tasks.withType(JavaCompile) {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    options*.compilerArgs << "-Xlint:unchecked" << "-Xlint:options"
    options*.encoding = StandardCharsets.UTF_8.name()
}

tasks.withType(Javadoc) {
    options*.encoding = StandardCharsets.UTF_8.name()
    options.addStringOption('Xdoclint:none', '-quiet')
}

task sources(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives jar
    archives sources
}

def getRepositoryUrl() {
    return isSnapshotBuild() ? getSnapshotRepositoryUrl() : getReleaseRepositoryUrl()
}

def isSnapshotBuild() {
    return version.endsWith('SNAPSHOT')
}

def getReleaseRepositoryUrl() {
    def property_default_key = 'REPOSITORY_RELEASE_URL'
    def property_key = 'REPOSITORY_RELEASE_URL_KEY'
    def RELEASE_REPOSITORY_URL_KEY = hasProperty(property_key) ? getProperty(property_key) : property_default_key
    def releaseRepositoryUrl = hasProperty(RELEASE_REPOSITORY_URL_KEY) ? getProperty(RELEASE_REPOSITORY_URL_KEY)
            : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
    println "releaseRepositoryUrl:" + releaseRepositoryUrl
    return releaseRepositoryUrl
}

def getSnapshotRepositoryUrl() {
    def property_default_key = 'REPOSITORY_SNAPSHOT_URL'
    def property_key = 'REPOSITORY_SNAPSHOT_URL_KEY'
    def SNAPSHOT_REPOSITORY_URL_KEY = hasProperty(property_key) ? getProperty(property_key) : property_default_key
    def snapshotRepositoryUrl =  hasProperty(SNAPSHOT_REPOSITORY_URL_KEY) ? getProperty(SNAPSHOT_REPOSITORY_URL_KEY)
            : "https://oss.sonatype.org/content/repositories/snapshots/"
    println "snapshotRepositoryUrl:" + snapshotRepositoryUrl
    return snapshotRepositoryUrl
}

def getRepositoryUsername() {
    def property_default_key = 'REPOSITORY_USERNAME'
    def property_key = 'REPOSITORY_USERNAME_KEY'
    def SONATYPE_USERNAME_KEY = hasProperty(property_key) ? getProperty(property_key) : property_default_key
    def username = hasProperty(SONATYPE_USERNAME_KEY) ? getProperty(SONATYPE_USERNAME_KEY) : ""
    println "username:" + username
    return username
}

def getRepositoryPassword() {
    def property_default_key = 'REPOSITORY_PASSWORD'
    def property_key = 'REPOSITORY_PASSWORD_KEY'
    def SONATYPE_PASSWORD_KEY = hasProperty(property_key) ? getProperty(property_key) : property_default_key
    def password = hasProperty(SONATYPE_PASSWORD_KEY) ? getProperty(SONATYPE_PASSWORD_KEY) : ""
    println "password:" + password
    return password
}

// https://docs.gradle.org/current/dsl/org.gradle.api.publish.maven.MavenPublication.html
publishing {
    publications {
        maven(MavenPublication) {
            groupId project.group
            artifactId project.name
            version "${version}"
            from components.java
            artifact sources

            pom {
                name = POM_ARTIFACT_ID
                description = POM_DESCRIPTION
                url = POM_SCM_URL
                developers {
                    developer {
                        id = POM_DEVELOPER_ID
                        name = POM_DEVELOPER_NAME
                        email = POM_DEVELOPER_EMAIL
                    }
                }
                scm {
                    url = POM_SCM_URL
                    connection = POM_SCM_CONNECTION
                    developerConnection = POM_SCM_DEV_CONNECTION
                }
            }
        }
    }
    repositories {
        maven {
            name = 'releaseRepository'
            url = getRepositoryUrl()
            credentials {
                username = getRepositoryUsername()
                password = getRepositoryPassword()
            }
        }
    }
}
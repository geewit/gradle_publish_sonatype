import java.nio.charset.StandardCharsets

buildscript {
    repositories {
        mavenLocal()
        maven { url "https://maven.aliyun.com/repository/gradle-plugin" }
        maven { url "https://repo.maven.apache.org/maven2" }
    }
}

apply plugin: 'java-library'
apply plugin: 'maven-publish'
apply plugin: 'signing'

buildDir = 'target'

repositories {
    mavenLocal()
    maven {
        url getReleaseRepositoryUrl()
        allowInsecureProtocol true
        credentials {
            username = getRepositoryUsername()
            password = getRepositoryPassword()
        }
    }
    maven {
        url getSnapshotRepositoryUrl()
        allowInsecureProtocol true
        credentials {
            username = getRepositoryUsername()
            password = getRepositoryPassword()
        }
    }
    maven {
        name "aliyun"
        url "https://maven.aliyun.com/repository/central"
    }
    maven {
        name "central"
        url "https://repo.maven.apache.org/maven2"
    }
}

task sources(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

task javadocs(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

tasks.withType(JavaCompile) {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    options*.compilerArgs << "-Xlint:unchecked" << "-Xlint:options"
    options*.encoding = StandardCharsets.UTF_8.name()
}

tasks.withType(Jar) {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

tasks.withType(Javadoc) {
    failOnError = false
    options.windowTitle("${project.name} Javadoc ${project.version}")
    options*.encoding = StandardCharsets.UTF_8.name()
    options.addStringOption('Xdoclint:none', '-quiet')
}

tasks.withType(Copy) {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()
}

static def groupId(Project thisProject, Project rootProject) {
    println "thisProject.name = ${thisProject.name}"
    def prj = thisProject.parent
    def groupId = null
    Properties projectProps = new Properties()
    def projectPropsFile = thisProject.file('gradle.properties')
    if(projectPropsFile.exists()) {
        projectProps.load(projectPropsFile.newReader())
        groupId = projectProps.getProperty('group')
    }
    if(groupId == null) {
        println "project has not groupId"
        groupId = rootProject.group
        println "groupId = ${groupId}"
        if(thisProject.parent != null) {
            def deepth = 1
            println "thisProject.name = ${thisProject.name}"
            def group_suffix = ""
            while (prj != null) {
                println "deepth = ${deepth}"
                if(prj.parent != null) {
                    if(group_suffix.length() > 0) {
                        group_suffix = prj.name + "." + group_suffix
                    } else {
                        group_suffix = prj.name
                    }
                }
                println "group_suffix = ${group_suffix}"
                prj = prj.parent
                deepth++
            }
            if(group_suffix.length() > 0) {
                groupId = groupId + "." + group_suffix
            }
        } else {
            println "thisProject.parent == null"
            groupId = thisProject.group
            println "groupId = ${groupId}"
        }
    }
    println "--------- final groupId = ${groupId}"
    thisProject.group(groupId)
    return groupId
}

static def artifactId(Project project) {
    def prj = project.parent

    def artifactId
    if(project.hasProperty("artifactId")) {
        artifactId = project.property("artifactId")
        println "project.artifactId = ${artifactId}"
    } else {
        println "project has not artifactId"
        artifactId = project.name
        println "artifactId = ${artifactId}"
        while (prj != null) {
            println "prj.name = ${prj.name}"
            println "prj.depth = ${prj.depth}"
            artifactId = "${prj.name}-${artifactId}"
            println "artifactId = ${artifactId}"
            prj = prj.parent
        }
    }
    println "--------- final artifactId = ${artifactId}"
    return artifactId
}

static def isSnapshotBuild(Project rootProject) {
    return rootProject.version.contains("SNAPSHOT")
}

static def getRepositoryUrl(Project rootProject) {
    return isSnapshotBuild(rootProject) ? getSnapshotRepositoryUrl(rootProject) : getReleaseRepositoryUrl(rootProject)
}

static def getReleaseRepositoryUrl(Project rootProject) {
    def property_default_key = 'REPOSITORY_SONATYP_ERELEASE_URL'
    def property_key = 'REPOSITORY_RELEASE_URL_KEY'
    def RELEASE_REPOSITORY_URL_KEY = rootProject.hasProperty(property_key) ? rootProject.getProperty(property_key) : property_default_key
    def releaseRepositoryUrl = rootProject.hasProperty(RELEASE_REPOSITORY_URL_KEY) ? rootProject.getProperty(RELEASE_REPOSITORY_URL_KEY)
            : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
    println "releaseRepositoryUrl:" + releaseRepositoryUrl
    return releaseRepositoryUrl
}

static def getSnapshotRepositoryUrl(Project rootProject) {
    def property_default_key = 'REPOSITORY_SONATYP_SNAPSHOT_URL'
    def property_key = 'REPOSITORY_SNAPSHOT_URL_KEY'
    def SNAPSHOT_REPOSITORY_URL_KEY = rootProject.hasProperty(property_key) ? rootProject.getProperty(property_key) : property_default_key
    def snapshotRepositoryUrl =  rootProject.hasProperty(SNAPSHOT_REPOSITORY_URL_KEY) ? rootProject.getProperty(SNAPSHOT_REPOSITORY_URL_KEY)
            : "https://oss.sonatype.org/content/repositories/snapshots/"
    println "snapshotRepositoryUrl:" + snapshotRepositoryUrl
    return snapshotRepositoryUrl
}

static def getRepositoryUsername(Project rootProject) {
    if(rootProject.ext.has('REPOSITORY_USERNAME')) {
        println "rootProject.ext.get('REPOSITORY_USERNAME'): " + rootProject.ext.get('REPOSITORY_USERNAME')
        return rootProject.ext.get('REPOSITORY_USERNAME')
    }
    def property_default_key = 'REPOSITORY_USERNAME'
    def property_key = 'REPOSITORY_USERNAME_KEY'
    def SONATYPE_USERNAME_KEY = rootProject.hasProperty(property_key) ? rootProject.getProperty(property_key) : property_default_key
    def username = rootProject.hasProperty(SONATYPE_USERNAME_KEY) ? rootProject.getProperty(SONATYPE_USERNAME_KEY) : ""
    println "username: + $username"
    rootProject.ext.set('REPOSITORY_USERNAME', username)
    return username
}

static def getRepositoryPassword(Project rootProject) {
    if(rootProject.ext.has('REPOSITORY_PASSWORD')) {
        println "rootProject.ext.get('REPOSITORY_PASSWORD'): " + rootProject.ext.get('REPOSITORY_PASSWORD')
        return rootProject.ext.get('REPOSITORY_PASSWORD')
    }
    def property_default_key = 'REPOSITORY_PASSWORD'
    def property_key = 'REPOSITORY_PASSWORD_KEY'
    def SONATYPE_PASSWORD_KEY = rootProject.hasProperty(property_key) ? rootProject.getProperty(property_key) : property_default_key
    def password = rootProject.hasProperty(SONATYPE_PASSWORD_KEY) ? rootProject.getProperty(SONATYPE_PASSWORD_KEY) : ""
    println "password:" + password
    rootProject.ext.set('REPOSITORY_PASSWORD', password)
    return password
}

// https://docs.gradle.org/current/dsl/org.gradle.api.publish.maven.MavenPublication.html
publishing {
    publications {
        maven(MavenPublication) {
            afterEvaluate {
                def thisGroupId = groupId(project, rootProject)
                def thisArtifactId = artifactId(project)

                groupId thisGroupId
                artifactId thisArtifactId
                version version
                println "artifact: ${thisGroupId}:${thisArtifactId}:${version}"
                artifact jar
                artifact javadocs
                artifact sources
            }
            pom {
                name = POM_ARTIFACT_ID
                description = POM_DESCRIPTION
                url = POM_SCM_URL
                licenses {
                    license {
                        name = POM_LICENCE_NAME
                        url = POM_LICENCE_URL
                    }
                }
                developers {
                    developer {
                        id = POM_DEVELOPER_ID
                        name = POM_DEVELOPER_NAME
                        email = POM_DEVELOPER_EMAIL
                    }
                }
                scm {
                    url = POM_SCM_URL
                    connection = POM_SCM_CONNECTION
                    developerConnection = POM_SCM_DEV_CONNECTION
                }
            }
        }
    }
    repositories {
        maven {
            name = 'releaseRepository'
            url = getRepositoryUrl(rootProject)
            allowInsecureProtocol true
            credentials {
                username = getRepositoryUsername(rootProject)
                password = getRepositoryPassword(rootProject)
            }
        }
    }
}

signing {
    sign publishing.publications.maven
}
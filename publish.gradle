import groovy.json.JsonSlurper
import java.nio.charset.StandardCharsets

logger.info("rootProject: ${rootProject.name}")
ext {
    profile = System.getProperty('profile') ?: 'development'
    logger.info("profile = ${profile}")
}

Properties props = new Properties()
def versionFile = rootProject.file('version.properties')
if(versionFile.exists()) {
    props.load(versionFile.newReader() as Reader)
    props.each { prop ->
        logger.info("${prop.key}: ${prop.value}")
        rootProject.ext.set(prop.key, prop.value)
    }
}
def excludeArtifacts = []
def excludeFile = rootProject.file('gradle-exclude.json')
if(excludeFile.exists()) {
    excludeArtifacts = new JsonSlurper().parseText(excludeFile.text)
    excludeArtifacts?.each { item ->
        logger.info("exclude ${item.group}: ${item.module}")
    }
}

def need_publish = false
if (rootProject.hasProperty('io.geewit.gradle.need_publish')) {
    need_publish = 'true'.equalsIgnoreCase(rootProject.getProperties().get('io.geewit.gradle.need_publish').toString())
}
logger.info("need_publish: ${need_publish}")

def publish_need_sign = false
if (rootProject.hasProperty('io.geewit.gradle.publish_need_sign')) {
    publish_need_sign = 'true'.equalsIgnoreCase(rootProject.getProperties().get('io.geewit.gradle.publish_need_sign').toString())
}
logger.info("publish_need_sign: ${publish_need_sign}")

def java_version = JavaVersion.VERSION_1_8
if (rootProject.hasProperty('io.geewit.gradle.java_version')) {
    java_version = JavaVersion.toVersion(rootProject.getProperties().get('io.geewit.gradle.java_version'))
}
logger.info("java_version: ${java_version}")

buildscript {
    repositories {
        mavenLocal()
        maven { url 'https://maven.aliyun.com/repository/gradle-plugin' }
        maven { url 'https://repo.maven.apache.org/maven2' }
        maven { url 'https://repo.spring.io/release' }
    }
}

apply plugin: 'java-library'
if (need_publish) {
    apply plugin: 'maven-publish'
    if (publish_need_sign) {
        apply plugin: 'signing'
    }
}

apply from: 'https://gitee.com/geewit/gradle_publish_sonatype/raw/master/dependency-strategy.gradle'

def artifactExcludeFiles = []
def artifactExcludeFile = project.file('publish-artifact-exclude.json')
if(artifactExcludeFile.exists()) {
    artifactExcludeFiles = new JsonSlurper().parseText(artifactExcludeFile.text)
    logger.info("artifactExcludeFiles: ${artifactExcludeFiles}")
}

def publishSources = true
if(rootProject.ext.has('PUBLISH_SOURCE')) {
    logger.debug("rootProject.ext.get('PUBLISH_SOURCE'): {}", rootProject.ext.get('PUBLISH_SOURCE'))
    publishSources = rootProject.ext.get('PUBLISH_SOURCE').toBoolean()
}
logger.info("publishSources: ${publishSources}")

buildDir = 'target'

repositories {
    mavenLocal()
    maven {
        name 'aliyun'
        url 'https://maven.aliyun.com/repository/central'
    }
    maven {
        name 'central'
        url 'https://repo.maven.apache.org/maven2'
    }
    maven {
        name 'spring-release'
        url 'https://repo.spring.io/release'
    }
    maven {
        url getReleaseRepositoryUrl(rootProject)
        allowInsecureProtocol true
        credentials {
            username = getRepositoryUsername(rootProject)
            password = getRepositoryPassword(rootProject)
        }
    }
    maven {
        url getSnapshotRepositoryUrl(rootProject)
        allowInsecureProtocol true
        credentials {
            username = getRepositoryUsername(rootProject)
            password = getRepositoryPassword(rootProject)
        }
    }
}

configurations {
    all { config ->
        config.exclude group: 'org.apache.geronimo.specs'
        config.exclude group: 'org.jboss.spec.javax.annotation'
        config.exclude group: 'org.jboss.spec.javax.servlet'
        config.exclude group: 'org.jboss.spec.javax.transaction'
        config.exclude group: 'org.jboss.spec.javax.websocket'
        config.exclude group: 'org.hibernate.javax.persistence'
        config.exclude group: 'org.springframework.boot', module:'spring-boot-starter-logging'
        config.exclude group: 'org.springframework.boot', module:'spring-boot-starter-tomcat'
        config.exclude group: 'org.apache.tomcat', module:'tomcat-jdbc'
        config.exclude group: 'org.apache.tomcat.embed'
        config.exclude group: 'org.glassfish.hk2', module:'osgi-resource-locator'
        config.exclude group: 'org.glassfish.hk2.external', module:'javax.inject'
        config.exclude group: 'com.vaadin.external.google'
        config.exclude group: 'com.zaxxer'
        config.exclude group: 'org.codehaus.jackson'
        config.exclude group: 'org.codehaus.jettison'
        config.exclude group: 'org.slf4j', module:'slf4j-log4j12'
        if (profile != 'development') {
            config.exclude group: 'org.springframework.boot', module:'spring-boot-devtools'
        }
        excludeArtifacts?.each { item ->
            config.exclude group: item.group, module: item.module
        }
        resolutionStrategy.eachDependency { details ->
            resolutionStrategy(details as DependencyResolveDetails)
        }
    }
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java']
        }
        resources {
            srcDirs = ['src/main/resources']
        }
    }
    test {
        java {
            srcDirs = ['src/test/java']
        }
        resources {
            srcDirs = ['src/test/resources']
        }
    }
}

task sources(type: Jar) {
    archiveClassifier.set('sources')
    from sourceSets.main.allSource
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

task javadocs(type: Jar, dependsOn: javadoc) {
    archiveClassifier.set('javadoc')
    from javadoc.destinationDir
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

tasks.withType(JavaCompile) {
    sourceCompatibility = java_version
    targetCompatibility = java_version

    options*.compilerArgs << '-Xlint:unchecked' << '-Xlint:options'
    options*.encoding = StandardCharsets.UTF_8.name()
}

tasks.withType(Jar) {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

tasks.withType(Javadoc) {
    failOnError = false
    options.windowTitle("${project.name} Javadoc ${project.version}")
    options*.encoding = StandardCharsets.UTF_8.name()
    options.addStringOption('Xdoclint:none', '-quiet')
}

tasks.withType(Copy) {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()
}

static def generateGroupId(Project thisProject, Project rootProject) {
    println "thisProject.name = ${thisProject.name}"
    def prj = thisProject.parent
    def groupId = null
    Properties projectProps = new Properties()
    def projectPropsFile = thisProject.file('gradle.properties')
    if(projectPropsFile.exists()) {
        projectProps.load(projectPropsFile.newReader() as Reader)
        groupId = projectProps.getProperty('group')
    }
    if(groupId == null) {
        println 'project has not groupId'
        groupId = rootProject.group
        println "groupId = ${groupId}"
        if(thisProject.parent != null) {
            def deepth = 1
            println "thisProject.name = ${thisProject.name}"
            def group_suffix = ''
            while (prj != null) {
                println "deepth = ${deepth}"
                if(prj.parent != null) {
                    if(group_suffix.length() > 0) {
                        group_suffix = prj.name + "." + group_suffix
                    } else {
                        group_suffix = prj.name
                    }
                }
                println "group_suffix = ${group_suffix}"
                prj = prj.parent
                deepth++
            }
            if(group_suffix.length() > 0) {
                groupId = groupId + '.' + group_suffix
            }
        } else {
            println 'thisProject.parent == null'
            groupId = thisProject.group
            println "groupId = ${groupId}"
        }
    }
    println "--------- final groupId = ${groupId}"
    thisProject.group(groupId)
    return groupId
}

static def generateArtifactId(Project project) {
    def prj = project.parent

    def artifactId
    if(project.hasProperty('artifactId')) {
        artifactId = project.property('artifactId')
        println "project.artifactId = ${artifactId}"
    } else {
        println 'project has not artifactId'
        artifactId = project.name
        println "artifactId = ${artifactId}"
        while (prj != null) {
            println "prj.name = ${prj.name}"
            println "prj.depth = ${prj.depth}"
            artifactId = "${prj.name}-${artifactId}"
            println "artifactId = ${artifactId}"
            prj = prj.parent
        }
    }
    println "--------- final artifactId = ${artifactId}"
    return artifactId
}

static def isSnapshotBuild(Project rootProject) {
    return rootProject.version.contains('SNAPSHOT')
}

static def getRepositoryUrl(Project rootProject) {
    return isSnapshotBuild(rootProject) ? getSnapshotRepositoryUrl(rootProject) : getReleaseRepositoryUrl(rootProject)
}

static def getReleaseRepositoryUrl(Project rootProject) {
    def property_default_key = 'REPOSITORY_SONATYP_ERELEASE_URL'
    def property_key = 'REPOSITORY_RELEASE_URL_KEY'
    def RELEASE_REPOSITORY_URL_KEY = rootProject.hasProperty(property_key) ? rootProject.getProperty(property_key) : property_default_key
    def releaseRepositoryUrl = rootProject.hasProperty(RELEASE_REPOSITORY_URL_KEY) ? rootProject.getProperty(RELEASE_REPOSITORY_URL_KEY)
            : 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
    println "releaseRepositoryUrl: $releaseRepositoryUrl"
    return releaseRepositoryUrl
}

static def getSnapshotRepositoryUrl(Project rootProject) {
    def property_default_key = 'REPOSITORY_SONATYP_SNAPSHOT_URL'
    def property_key = 'REPOSITORY_SNAPSHOT_URL_KEY'
    def SNAPSHOT_REPOSITORY_URL_KEY = rootProject.hasProperty(property_key) ? rootProject.getProperty(property_key) : property_default_key
    def snapshotRepositoryUrl =  rootProject.hasProperty(SNAPSHOT_REPOSITORY_URL_KEY) ? rootProject.getProperty(SNAPSHOT_REPOSITORY_URL_KEY)
            : 'https://oss.sonatype.org/content/repositories/snapshots/'
    println "snapshotRepositoryUrl: $snapshotRepositoryUrl"
    return snapshotRepositoryUrl
}

static def getRepositoryUsername(Project rootProject) {
    if(rootProject.ext.has('REPOSITORY_USERNAME')) {
        println "rootProject.ext.get("REPOSITORY_USERNAME"): " + rootProject.ext.get('REPOSITORY_USERNAME')
        return rootProject.ext.get('REPOSITORY_USERNAME')
    }
    def property_default_key = 'REPOSITORY_USERNAME'
    def property_key = 'REPOSITORY_USERNAME_KEY'
    def SONATYPE_USERNAME_KEY = rootProject.hasProperty(property_key) ? rootProject.getProperty(property_key) : property_default_key
    def username = rootProject.hasProperty(SONATYPE_USERNAME_KEY) ? rootProject.getProperty(SONATYPE_USERNAME_KEY) : ""
    println "username: $username"
    rootProject.ext.set('REPOSITORY_USERNAME', username)
    return username
}

static def getRepositoryPassword(Project rootProject) {
    if(rootProject.ext.has('REPOSITORY_PASSWORD')) {
        println "rootProject.ext.get("REPOSITORY_PASSWORD"): " + rootProject.ext.get('REPOSITORY_PASSWORD')
        return rootProject.ext.get('REPOSITORY_PASSWORD')
    }
    def property_default_key = 'REPOSITORY_PASSWORD'
    def property_key = 'REPOSITORY_PASSWORD_KEY'
    def SONATYPE_PASSWORD_KEY = rootProject.hasProperty(property_key) ? rootProject.getProperty(property_key) : property_default_key
    def password = rootProject.hasProperty(SONATYPE_PASSWORD_KEY) ? rootProject.getProperty(SONATYPE_PASSWORD_KEY) : ""
    println "password: $password"
    rootProject.ext.set('REPOSITORY_PASSWORD', password)
    return password
}

// https://docs.gradle.org/current/dsl/org.gradle.api.publish.maven.MavenPublication.html
if (need_publish) {
    publishing {
        publications {
            api(MavenPublication) {
                afterEvaluate {
                    def thisGroupId = generateGroupId(project, rootProject)
                    def thisArtifactId = generateArtifactId(project)
                    groupId thisGroupId
                    artifactId thisArtifactId
                    version version
                    logger.debug("api artifact: ${thisGroupId}:${thisArtifactId}:${version}")
                    artifact apiJar
                    artifact javadocs
                    if(publishSources) {
                        logger.debug('publishing.artifact sources')
                        artifact sources
                    }
                }
                pom {
                    name = POM_ARTIFACT_ID
                    if (rootProject.ext.has('POM_DESCRIPTION')) {
                        description = POM_DESCRIPTION
                    }
                    if (rootProject.ext.has('POM_SCM_URL')) {
                        url = POM_SCM_URL
                    }
                    licenses {
                        license {
                            if (rootProject.ext.has('POM_LICENCE_NAME')) {
                                name = POM_LICENCE_NAME
                            }
                            if (rootProject.ext.has('POM_LICENCE_URL')) {
                                url = POM_LICENCE_URL
                            }
                        }
                    }
                    developers {
                        developer {
                            if (rootProject.ext.has('POM_LICENCE_URL')) {
                                id = POM_DEVELOPER_ID
                            }
                            if (rootProject.ext.has('POM_DEVELOPER_NAME')) {
                                name = POM_DEVELOPER_NAME
                            }
                            if (rootProject.ext.has('POM_DEVELOPER_EMAIL')) {
                                email = POM_DEVELOPER_EMAIL
                            }
                        }
                    }
                    scm {
                        if (rootProject.ext.has('POM_SCM_URL')) {
                            url = POM_SCM_URL
                        }
                        if (rootProject.ext.has('POM_SCM_CONNECTION')) {
                            connection = POM_SCM_CONNECTION
                        }
                        if (rootProject.ext.has('POM_SCM_DEV_CONNECTION')) {
                            developerConnection = POM_SCM_DEV_CONNECTION
                        }

                    }
                }
            }
            maven(MavenPublication) {
                afterEvaluate {
                    def thisGroupId = generateGroupId(project, rootProject)
                    def thisArtifactId = generateArtifactId(project)
                    groupId thisGroupId
                    artifactId thisArtifactId
                    version version
                    logger.debug("artifact: ${thisGroupId}:${thisArtifactId}:${version}")
                    from components.java
                    logger.debug("publishing.publishSources: ${publishSources}")
                    if(publishSources) {
                        logger.debug('publishing.artifact sources')
                        artifact sources
                    }
                }
                pom {
                    name = POM_ARTIFACT_ID
                    if (rootProject.ext.has('POM_DESCRIPTION')) {
                        description = POM_DESCRIPTION
                    }
                    if (rootProject.ext.has('POM_SCM_URL')) {
                        url = POM_SCM_URL
                    }
                    licenses {
                        license {
                            if (rootProject.ext.has('POM_LICENCE_NAME')) {
                                name = POM_LICENCE_NAME
                            }
                            if (rootProject.ext.has('POM_LICENCE_URL')) {
                                url = POM_LICENCE_URL
                            }
                        }
                    }
                    developers {
                        developer {
                            if (rootProject.ext.has('POM_LICENCE_URL')) {
                                id = POM_DEVELOPER_ID
                            }
                            if (rootProject.ext.has('POM_DEVELOPER_NAME')) {
                                name = POM_DEVELOPER_NAME
                            }
                            if (rootProject.ext.has('POM_DEVELOPER_EMAIL')) {
                                email = POM_DEVELOPER_EMAIL
                            }
                        }
                    }
                    scm {
                        if (rootProject.ext.has('POM_SCM_URL')) {
                            url = POM_SCM_URL
                        }
                        if (rootProject.ext.has('POM_SCM_CONNECTION')) {
                            connection = POM_SCM_CONNECTION
                        }
                        if (rootProject.ext.has('POM_SCM_DEV_CONNECTION')) {
                            developerConnection = POM_SCM_DEV_CONNECTION
                        }

                    }
                }
            }
        }
        repositories {
            maven {
                name = 'releaseRepository'
                url = getRepositoryUrl(rootProject)
                allowInsecureProtocol true
                credentials {
                    username = getRepositoryUsername(rootProject)
                    password = getRepositoryPassword(rootProject)
                }
            }
        }
    }

    if (publish_need_sign) {
        signing {
            sign publishing.publications.maven
        }
    }
}

rootProject.tasks.each { action ->
    println "project(${project.name}).task(${action.name})"
    if (action.name.toLowerCase().contains('kotlin')) {
        action.setEnabled(false)
    }
}
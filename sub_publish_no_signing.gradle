import groovy.json.JsonSlurper

import java.nio.charset.StandardCharsets


def isSkipProject(Project project) {
    def isSkipProject = !project.buildscript.sourceFile.exists()
    println "isSkipProject = ${isSkipProject}"
    return isSkipProject
}

ext {
    isSkipProject = this.&isSkipProject
}

def groupId(Project project) {
    println "project.name = ${project.name}"
    def prj = project.parent
    def groupId = null
    Properties projectProps = new Properties()
    def projectPropsFile = project.file('gradle.properties')
    if(projectPropsFile.exists()) {
        projectProps.load(projectPropsFile.newReader())
        groupId = projectProps.getProperty('group')
    }
    if(groupId == null) {
        println "project has not groupId"
        groupId = rootProject.group
        println "groupId = ${groupId}"
        if(project.parent != null) {
            def deepth = 1
            println "project.name = ${project.name}"
            def group_suffix = ""
            while (prj != null) {
                println "deepth = ${deepth}"
                if(prj.parent != null) {
                    if(group_suffix.length() > 0) {
                        group_suffix = prj.name + "." + group_suffix
                    } else {
                        group_suffix = prj.name
                    }
                }
                println "group_suffix = ${group_suffix}"
                prj = prj.parent
                deepth++
            }
            if(group_suffix.length() > 0) {
                groupId = groupId + "." + group_suffix
            }
        } else {
            println "project.parent == null"
            groupId = project.group
            println "groupId = ${groupId}"
        }
    }
    println "--------- final groupId = ${groupId}"
    project.group(groupId)
    return groupId
}

Properties props = new Properties()
def versionFile = rootProject.file('version.properties')
println "rootProject: ${rootProject.name}"

if(versionFile.exists()) {
    props.load(versionFile.newReader())
    props.each { prop ->
        println "${prop.key}: ${prop.value}"
        project.ext.set(prop.key, prop.value)
    }
}
def excludeArtifacts = []
def excludeFile = rootProject.file('gradle-exclude.json')
if(excludeFile.exists()) {
    excludeArtifacts = new JsonSlurper().parseText(excludeFile.text)
    excludeArtifacts?.each { item ->
        println "exclude ${item.group}: ${item.module}"
    }
}

def artifactId(Project project) {
    def prj = project.parent

    def artifactId
    if(project.hasProperty("artifactId")) {
        artifactId = project.property("artifactId")
        println "project.artifactId = ${artifactId}"
    } else {
        println "project has not artifactId"
        artifactId = project.name
        println "artifactId = ${artifactId}"
        while (prj != null) {
            println "prj.name = ${prj.name}"
            println "prj.depth = ${prj.depth}"
            artifactId = "${prj.name}-${artifactId}"
            println "artifactId = ${artifactId}"
            prj = prj.parent
        }
    }
    println "--------- final artifactId = ${artifactId}"
    return artifactId
}

def getReleaseRepositoryUrl() {
    if(rootProject.ext.has('REPOSITORY_RELEASE_URL')) {
        println "rootProject.ext.get('REPOSITORY_RELEASE_URL'): " + rootProject.ext.get('REPOSITORY_RELEASE_URL')
        return rootProject.ext.get('REPOSITORY_RELEASE_URL')
    }
    def property_default_key = 'REPOSITORY_RELEASE_URL'
    def property_key = 'REPOSITORY_RELEASE_URL_KEY'
    def RELEASE_REPOSITORY_URL_KEY = hasProperty(property_key) ? getProperty(property_key) : property_default_key
    def releaseRepositoryUrl = hasProperty(RELEASE_REPOSITORY_URL_KEY) ? getProperty(RELEASE_REPOSITORY_URL_KEY)
            : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
    println "releaseRepositoryUrl:" + releaseRepositoryUrl
    rootProject.ext.set('REPOSITORY_RELEASE_URL', releaseRepositoryUrl)
    return releaseRepositoryUrl
}

def getSnapshotRepositoryUrl() {
    if(rootProject.ext.has('REPOSITORY_SNAPSHOT_URL')) {
        println "rootProject.ext.get('REPOSITORY_SNAPSHOT_URL'): " + rootProject.ext.get('REPOSITORY_SNAPSHOT_URL')
        return rootProject.ext.get('REPOSITORY_SNAPSHOT_URL')
    }
    def property_default_key = 'REPOSITORY_SNAPSHOT_URL'
    def property_key = 'REPOSITORY_SNAPSHOT_URL_KEY'
    def SNAPSHOT_REPOSITORY_URL_KEY = hasProperty(property_key) ? getProperty(property_key) : property_default_key
    def snapshotRepositoryUrl =  hasProperty(SNAPSHOT_REPOSITORY_URL_KEY) ? getProperty(SNAPSHOT_REPOSITORY_URL_KEY)
            : "https://oss.sonatype.org/content/repositories/snapshots/"
    println "snapshotRepositoryUrl:" + snapshotRepositoryUrl
    rootProject.ext.set('REPOSITORY_SNAPSHOT_URL', snapshotRepositoryUrl)
    return snapshotRepositoryUrl
}

def getRepositoryUsername() {
    if(rootProject.ext.has('REPOSITORY_USERNAME')) {
        println "rootProject.ext.get('REPOSITORY_USERNAME'): " + rootProject.ext.get('REPOSITORY_USERNAME')
        return rootProject.ext.get('REPOSITORY_USERNAME')
    }
    def property_default_key = 'REPOSITORY_USERNAME'
    def property_key = 'REPOSITORY_USERNAME_KEY'
    def SONATYPE_USERNAME_KEY = hasProperty(property_key) ? getProperty(property_key) : property_default_key
    def username = hasProperty(SONATYPE_USERNAME_KEY) ? getProperty(SONATYPE_USERNAME_KEY) : ""
    println "username: + $username"
    rootProject.ext.set('REPOSITORY_USERNAME', username)
    return username
}

def getRepositoryPassword() {
    if(rootProject.ext.has('REPOSITORY_PASSWORD')) {
        println "rootProject.ext.get('REPOSITORY_PASSWORD'): " + rootProject.ext.get('REPOSITORY_PASSWORD')
        return rootProject.ext.get('REPOSITORY_PASSWORD')
    }
    def property_default_key = 'REPOSITORY_PASSWORD'
    def property_key = 'REPOSITORY_PASSWORD_KEY'
    def SONATYPE_PASSWORD_KEY = hasProperty(property_key) ? getProperty(property_key) : property_default_key
    def password = hasProperty(SONATYPE_PASSWORD_KEY) ? getProperty(SONATYPE_PASSWORD_KEY) : ""
    println "password:" + password
    rootProject.ext.set('REPOSITORY_PASSWORD', password)
    return password
}

def getRepositoryUrl(Project project) {
    return this.isSnapshotBuild(project) ? this.getSnapshotRepositoryUrl() : this.getReleaseRepositoryUrl()
}

def isSnapshotBuild(Project project) {
    return project.version.endsWith('SNAPSHOT')
}

allprojects {
    buildDir = 'target'
    apply plugin: "idea"
    idea {
        module {
            excludeDirs += file( ".gradle" )
            excludeDirs += file( ".idea" )
            excludeDirs += buildDir
            downloadJavadoc = false
            downloadSources = true
            name = project.name
        }
    }
}


subprojects {
    buildscript {
        repositories {
            mavenLocal()
            maven { url "https://repo.maven.apache.org/maven2" }
            maven { url "https://maven.aliyun.com/repository/gradle-plugin" }
        }
    }
    println "subproject.name = ${it.name}"

    ext {
        profile = System.getProperty("profile") ?: "development"
        println "profile = ${profile}"
    }

    if(!this.isSkipProject(it as Project)) {
        apply plugin: 'java-library'
        apply plugin: 'maven-publish'
        apply from: 'https://gitee.com/geewit/gradle_publish_sonatype/raw/master/dependency-strategy.gradle'

        repositories {
            mavenLocal()
            maven {
                url getReleaseRepositoryUrl()
                allowInsecureProtocol true
                credentials {
                    username = getRepositoryUsername()
                    password = getRepositoryPassword()
                }
            }
            maven {
                url getSnapshotRepositoryUrl()
                allowInsecureProtocol true
                credentials {
                    username = getRepositoryUsername()
                    password = getRepositoryPassword()
                }
            }
            maven {
                name "central"
                url "https://repo.maven.apache.org/maven2"
            }
            maven {
                name "aliyun"
                url "https://maven.aliyun.com/repository/central"
            }
        }

        configurations {
            all { config ->
                config.exclude group: "org.apache.geronimo.specs"
                config.exclude group: "org.jboss.spec.javax.annotation"
                config.exclude group: "org.jboss.spec.javax.servlet"
                config.exclude group: "org.jboss.spec.javax.transaction"
                config.exclude group: "org.jboss.spec.javax.websocket"
                config.exclude group: "org.hibernate.javax.persistence"
                config.exclude group: "org.springframework.boot", module:"spring-boot-starter-logging"
                config.exclude group: "org.springframework.boot", module:"spring-boot-starter-tomcat"
                config.exclude group: "org.apache.tomcat", module:"tomcat-jdbc"
                config.exclude group: "org.apache.tomcat.embed"
                config.exclude group: "org.glassfish.hk2", module:"osgi-resource-locator"
                config.exclude group: "org.glassfish.hk2.external", module:"javax.inject"
                config.exclude group: "com.vaadin.external.google"
                config.exclude group: "com.zaxxer"
                config.exclude group: "org.codehaus.jackson"
                config.exclude group: "org.codehaus.jettison"
                config.exclude group: "org.slf4j", module:"slf4j-log4j12"
                if (profile != 'development') {
                    config.exclude group: "org.springframework.boot", module:"spring-boot-devtools"
                }
                excludeArtifacts?.each { item ->
                    config.exclude group: item.group, module: item.module
                }
                resolutionStrategy.eachDependency { details ->
                    resolutionStrategy(details)
                }
            }
        }

        sourceSets {
            main {
                java {
                    srcDirs = ['src/main/java']
                }
                resources {
                    srcDirs = ['src/main/resources']
                }
            }
            test {
                java {
                    srcDirs = ['src/test/java']
                }
                resources {
                    srcDirs = ['src/test/resources']
                }
            }
        }

        tasks.withType(JavaCompile) {
            sourceCompatibility = JavaVersion.VERSION_1_8
            targetCompatibility = JavaVersion.VERSION_1_8

            options*.compilerArgs << "-Xlint:unchecked" << "-Xlint:options"
            options*.encoding = StandardCharsets.UTF_8.name()
        }

        def publishSources = true
        if(rootProject.ext.has('PUBLISH_SOURCE')) {
            println "rootProject.ext.get('PUBLISH_SOURCE'): " + rootProject.ext.get('PUBLISH_SOURCE')
            publishSources = rootProject.ext.get('PUBLISH_SOURCE').toBoolean()
        }
        println "publishSources: ${publishSources}"

        tasks.withType(Javadoc) {
            if(publishSources) {
                options*.encoding = StandardCharsets.UTF_8.name()
                options.addStringOption('Xdoclint:none', '-quiet')
            } else {
                enabled = false
            }
        }

        tasks.withType(Jar) {
            duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        }

        task sources(type: Jar) {
            if(publishSources) {
                classifier = 'sources'
                from sourceSets.main.allSource
            } else {
                enabled = false
            }
            duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        }

        tasks.withType(Copy) {
            duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        }

        // https://docs.gradle.org/current/dsl/org.gradle.api.publish.maven.MavenPublication.html
        publishing {
            publications {
                maven(MavenPublication) {
                    def thisGroupId = groupId(project)
                    def thisArtifactId = artifactId(project)

                    groupId thisGroupId
                    artifactId thisArtifactId
                    version version
                    println "artifact: ${thisGroupId}:${thisArtifactId}:${version}"
                    from components.java
                    println "publishing.publishSources: ${publishSources}"
                    if(publishSources) {
                        println "publishing.artifact sources"
                        artifact sources
                    }

                    pom {
                        description = POM_DESCRIPTION
                    }
                }
            }
            repositories {
                maven {
                    name = 'releaseRepository'
                    url = getRepositoryUrl(project)
                    allowInsecureProtocol true
                    credentials {
                        username = getRepositoryUsername()
                        password = getRepositoryPassword()
                    }
                }
            }
        }
    }
}

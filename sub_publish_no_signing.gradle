import java.nio.charset.StandardCharsets

allprojects {
    buildDir = 'target'
    apply plugin: "idea"
    idea {
        module {
            excludeDirs += file( ".gradle" )
            excludeDirs += file( ".idea" )
            excludeDirs += buildDir
            downloadJavadoc = false
            downloadSources = true
        }
    }
}

def isSkipSubProject(Project project) {
    println "buildscript = ${project.buildscript.sourceFile}"
    def isSkipSubProject = !project.buildscript.sourceFile.exists()
    println "isSkipSubProject = ${isSkipSubProject}"
    return isSkipSubProject
    // FileTree tree = project.fileTree(dir: project.projectDir, includes: ['build.gradle', 'settings.gradle'])
}

def artifactId(Project project) {

    def prj = project.parent

    def artifactId
    if(project.hasProperty("artifactId")) {
        artifactId = project.property("artifactId")
        println "project.artifactId = ${artifactId}"
    } else {
        println "project has not artifactId"
        artifactId = project.name
        println "artifactId = ${artifactId}"
        while (prj != null) {
            println "prj.name = ${prj.name}"
            println "prj.depth = ${prj.depth}"
            artifactId = "${prj.name}-${artifactId}"
            println "artifactId = ${artifactId}"
            prj = prj.parent
        }
    }
    println "--------- final artifactId = ${artifactId}"
    return artifactId
}

subprojects {
    buildscript {
        repositories {
            mavenLocal()
            maven { url "https://maven.aliyun.com/repository/gradle-plugin" }
            maven { url "http://repo1.maven.org/maven2" }
        }
    }
    println "subproject.name = ${it.name}"

    ext {
        profile = System.getProperty("profile") ?: "development"
        println "profile = ${profile}"
    }

    if(isSkipSubProject(it as Project)) {
//        println "Project = ${it.name}"
//        def taskList = it.getTasks().withType(Task)
//        def count = 0
//        println "遍历所有的task，打印出其名字"
//        taskList.all { Task task ->
//            println "${count++} task.name: ${task.name}"
//            task.enabled = false
//        }
    } else {
        apply plugin: 'java'
        apply plugin: 'maven-publish'

        repositories {
            mavenLocal()
//            mavenCentral()
            // maven { url "https://maven.aliyun.com/repository/central" }
            maven { url "http://repo1.maven.org/maven2" }
            maven {
                url getReleaseRepositoryUrl()
                credentials {
                    username = getRepositoryUsername()
                    password = getRepositoryPassword()
                }
            }
            maven {
                url getSnapshotRepositoryUrl()
                credentials {
                    username = getRepositoryUsername()
                    password = getRepositoryPassword()
                }
            }
        }

        configurations {
            all { config ->
            }
        }

        sourceSets {
            main {
                java {
                    srcDirs = ['src/main/java']
                }
                resources {
                    srcDirs = ['src/main/resources']
                }
            }
        }

        compileJava {
            sourceCompatibility = JavaVersion.VERSION_1_8
            targetCompatibility = JavaVersion.VERSION_1_8
        }

        compileTestJava {
            sourceCompatibility = JavaVersion.VERSION_1_8
            targetCompatibility = JavaVersion.VERSION_1_8
        }

        compileJava.options*.compilerArgs << "-Xlint:unchecked" << "-Xlint:options"

        [compileJava, compileTestJava, javadoc]*.options*.encoding = StandardCharsets.UTF_8.name()


        task sources(type: Jar) {
            classifier = 'sources'
            from sourceSets.main.allSource
        }

        artifacts {
            archives jar
            archives sources
        }

        // https://docs.gradle.org/current/dsl/org.gradle.api.publish.maven.MavenPublication.html
        publishing {
            publications {
                maven(MavenPublication) {
                    groupId project.group
                    artifactId artifactId(project)
                    version "${version}"
                    println "artifact: ${groupId}:${artifactId}:${version}"
                    from components.java
                    artifact sources

                    pom {
                        name = artifactId
                        description = POM_DESCRIPTION
                        url = POM_SCM_URL
                        developers {
                            developer {
                                id = POM_DEVELOPER_ID
                                name = POM_DEVELOPER_NAME
                                email = POM_DEVELOPER_EMAIL
                            }
                        }
                        scm {
                            url = POM_SCM_URL
                            connection = POM_SCM_CONNECTION
                            developerConnection = POM_SCM_DEV_CONNECTION
                        }
                    }
                }
            }
            repositories {
                maven {
                    name = 'nexusRepository'
                    url = getRepositoryUrl(project)
                    credentials {
                        username = getRepositoryUsername()
                        password = getRepositoryPassword()
                    }
                }
            }
        }
    }
}

def getRepositoryUrl(Project project) {
    return isSnapshotBuild(project) ? getSnapshotRepositoryUrl() : getReleaseRepositoryUrl()
}

def isSnapshotBuild(Project project) {
    return project.version.endsWith('SNAPSHOT')
}

def getReleaseRepositoryUrl() {
    def property_default_key = 'RELEASE_REPOSITORY_URL'
    def property_key = 'RELEASE_REPOSITORY_URL_KEY'
    def RELEASE_REPOSITORY_URL_KEY = hasProperty(property_key) ? getProperty(property_key) : property_default_key
    def releaseRepositoryUrl = hasProperty(RELEASE_REPOSITORY_URL_KEY) ? getProperty(RELEASE_REPOSITORY_URL_KEY)
            : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
    println "releaseRepositoryUrl:" + releaseRepositoryUrl
    return releaseRepositoryUrl
}

def getSnapshotRepositoryUrl() {
    def property_default_key = 'SNAPSHOT_REPOSITORY_URL'
    def property_key = 'SNAPSHOT_REPOSITORY_URL_KEY'
    def SNAPSHOT_REPOSITORY_URL_KEY = hasProperty(property_key) ? getProperty(property_key) : property_default_key
    def snapshotRepositoryUrl =  hasProperty(SNAPSHOT_REPOSITORY_URL_KEY) ? getProperty(SNAPSHOT_REPOSITORY_URL_KEY)
            : "https://oss.sonatype.org/content/repositories/snapshots/"
    println "snapshotRepositoryUrl:" + snapshotRepositoryUrl
    return snapshotRepositoryUrl
}

def getRepositoryUsername() {
    def property_default_key = 'SONATYPE_USERNAME'
    def property_key = 'SONATYPE_USERNAME_KEY'
    def SONATYPE_USERNAME_KEY = hasProperty(property_key) ? getProperty(property_key) : property_default_key
    def username = hasProperty(SONATYPE_USERNAME_KEY) ? getProperty(SONATYPE_USERNAME_KEY) : ""
    println "username:" + username
    return username
}

def getRepositoryPassword() {
    def property_default_key = 'SONATYPE_PASSWORD'
    def property_key = 'SONATYPE_PASSWORD_KEY'
    def SONATYPE_PASSWORD_KEY = hasProperty(property_key) ? getProperty(property_key) : property_default_key
    def password = hasProperty(SONATYPE_PASSWORD_KEY) ? getProperty(SONATYPE_PASSWORD_KEY) : ""
    println "password:" + password
    return password
}

import groovy.json.JsonSlurper
import java.nio.charset.StandardCharsets

ext {
    profile = System.getProperty("profile") ?: "development"
    println "profile = ${profile}"
}

Properties props = new Properties()
def versionFile = rootProject.file('version.properties')
println "rootProject: ${rootProject.name}"

if(versionFile.exists()) {
    props.load(versionFile.newReader())
    props.each { prop ->
        println "${prop.key}: ${prop.value}"
        rootProject.ext.set(prop.key, prop.value)
    }
}
def excludeArtifacts = []
def excludeFile = rootProject.file('gradle-exclude.json')
if(excludeFile.exists()) {
    excludeArtifacts = new JsonSlurper().parseText(excludeFile.text)
    excludeArtifacts?.each { item ->
        println "exclude ${item.group}: ${item.module}"
    }
}

buildscript {
    repositories {
        mavenLocal()
        maven { url "https://maven.aliyun.com/repository/gradle-plugin" }
        maven { url "https://repo.maven.apache.org/maven2" }
    }
}

apply plugin: 'java-library'
apply from: 'https://gitee.com/geewit/gradle_publish_sonatype/raw/master/dependency-strategy.gradle'

buildDir = 'target'

repositories {
    mavenLocal()
    maven {
        url getReleaseRepositoryUrl()
        allowInsecureProtocol true
        credentials {
            username = getRepositoryUsername()
            password = getRepositoryPassword()
        }
    }
    maven {
        url getSnapshotRepositoryUrl(rootProject)
        allowInsecureProtocol true
        credentials {
            username = getRepositoryUsername()
            password = getRepositoryPassword()
        }
    }
    maven {
        name "aliyun"
        url "https://maven.aliyun.com/repository/central"
    }
    maven {
        name "central"
        url "https://repo.maven.apache.org/maven2"
    }
}

static def groupId(Project thisProject, Project rootProject) {
    println "thisProject.name = ${thisProject.name}"
    def prj = thisProject.parent
    def groupId = null
    Properties projectProps = new Properties()
    def projectPropsFile = thisProject.file('gradle.properties')
    if(projectPropsFile.exists()) {
        projectProps.load(projectPropsFile.newReader())
        groupId = projectProps.getProperty('group')
    }
    if(groupId == null) {
        println "project has not groupId"
        groupId = rootProject.group
        println "groupId = ${groupId}"
        if(thisProject.parent != null) {
            def deepth = 1
            println "thisProject.name = ${thisProject.name}"
            def group_suffix = ""
            while (prj != null) {
                println "deepth = ${deepth}"
                if(prj.parent != null) {
                    if(group_suffix.length() > 0) {
                        group_suffix = prj.name + "." + group_suffix
                    } else {
                        group_suffix = prj.name
                    }
                }
                println "group_suffix = ${group_suffix}"
                prj = prj.parent
                deepth++
            }
            if(group_suffix.length() > 0) {
                groupId = groupId + "." + group_suffix
            }
        } else {
            println "thisProject.parent == null"
            groupId = thisProject.group
            println "groupId = ${groupId}"
        }
    }
    println "--------- final groupId = ${groupId}"
    thisProject.group(groupId)
    return groupId
}

static def artifactId(Project project) {
    def prj = project.parent

    def artifactId
    if(project.hasProperty("artifactId")) {
        artifactId = project.property("artifactId")
        println "project.artifactId = ${artifactId}"
    } else {
        println "project has not artifactId"
        artifactId = project.name
        println "artifactId = ${artifactId}"
        while (prj != null) {
            println "prj.name = ${prj.name}"
            println "prj.depth = ${prj.depth}"
            artifactId = "${prj.name}-${artifactId}"
            println "artifactId = ${artifactId}"
            prj = prj.parent
        }
    }
    println "--------- final artifactId = ${artifactId}"
    return artifactId
}


buildDir = 'target'
apply plugin: "idea"
idea {
    module {
        excludeDirs += file( ".gradle" )
        excludeDirs += file( ".idea" )
        excludeDirs += buildDir
        downloadJavadoc = false
        downloadSources = true
        name = project.name
    }
}

repositories {
    mavenLocal()
    maven {
        url getReleaseRepositoryUrl(rootProject)
        allowInsecureProtocol true
        credentials {
            username = getRepositoryUsername(rootProject)
            password = getRepositoryPassword(rootProject)
        }
    }
    maven {
        url getSnapshotRepositoryUrl(rootProject)
        allowInsecureProtocol true
        credentials {
            username = getRepositoryUsername(rootProject)
            password = getRepositoryPassword(rootProject)
        }
    }
    maven {
        name "aliyun"
        url "https://maven.aliyun.com/repository/central"
    }
    maven {
        name "central"
        url "https://repo.maven.apache.org/maven2"
    }
}

apply plugin: 'java-library'
apply from: 'https://gitee.com/geewit/gradle_publish_sonatype/raw/master/dependency-strategy.gradle'

configurations {
    all { config ->
        config.exclude group: "org.apache.geronimo.specs"
        config.exclude group: "org.jboss.spec.javax.annotation"
        config.exclude group: "org.jboss.spec.javax.servlet"
        config.exclude group: "org.jboss.spec.javax.transaction"
        config.exclude group: "org.jboss.spec.javax.websocket"
        config.exclude group: "org.hibernate.javax.persistence"
        config.exclude group: "org.springframework.boot", module:"spring-boot-starter-logging"
        config.exclude group: "org.springframework.boot", module:"spring-boot-starter-tomcat"
        config.exclude group: "org.apache.tomcat", module:"tomcat-jdbc"
        config.exclude group: "org.apache.tomcat.embed"
        config.exclude group: "org.glassfish.hk2", module:"osgi-resource-locator"
        config.exclude group: "org.glassfish.hk2.external", module:"javax.inject"
        config.exclude group: "com.vaadin.external.google"
        config.exclude group: "com.zaxxer"
        config.exclude group: "org.codehaus.jackson"
        config.exclude group: "org.codehaus.jettison"
        config.exclude group: "org.slf4j", module:"slf4j-log4j12"
        if (profile != 'development') {
            config.exclude group: "org.springframework.boot", module:"spring-boot-devtools"
        }
        excludeArtifacts?.each { item ->
            config.exclude group: item.group, module: item.module
        }
        resolutionStrategy.eachDependency { details ->
            resolutionStrategy(details)
        }
    }
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java']
        }
        resources {
            srcDirs = ['src/main/resources']
        }
    }
    test {
        java {
            srcDirs = ['src/test/java']
        }
        resources {
            srcDirs = ['src/test/resources']
        }
    }
}

tasks.withType(JavaCompile) {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17

    options*.compilerArgs << "-Xlint:unchecked" << "-Xlint:options"
    options*.encoding = StandardCharsets.UTF_8.name()
}

tasks.withType(Jar) {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

tasks.withType(Copy) {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

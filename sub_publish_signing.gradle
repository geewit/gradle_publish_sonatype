import java.nio.charset.StandardCharsets


def isSkipProject(Project project) {
    def isSkipProject = !project.buildscript.sourceFile.exists()
    println "isSkipProject = ${isSkipProject}"
    return isSkipProject
    // FileTree tree = project.fileTree(dir: project.projectDir, includes: ['build.gradle', 'settings.gradle'])
}

def isUIProject(Project project) {
    def package_json = file("${project.projectDir}/package.json")
    if (package_json.exists()) {
        return true
    }
    return false
}

ext {
    isSkipProject = this.&isSkipProject
    isUIProject = this.&isUIProject
}

def groupId(Project project) {
    def prj = project.parent

    def groupId
    if(project.hasProperty("groupId")) {
        groupId = project.property("groupId")
        println "project.groupId = ${groupId}"
    } else {
        println "project has not groupId"
        groupId = project.group
        println "groupId = ${groupId}"
        while (groupId != null && prj != null) {
            println "prj.name = ${prj.name}"
            println "prj.depth = ${prj.depth}"
            groupId = project.group
            println "groupId = ${groupId}"
            prj = prj.parent
        }
    }
    println "--------- final groupId = ${groupId}"
    return groupId
}

def artifactId(Project project) {

    def prj = project.parent

    def artifactId
    if(project.hasProperty("artifactId")) {
        artifactId = project.property("artifactId")
        println "project.artifactId = ${artifactId}"
    } else {
        println "project has not artifactId"
        artifactId = project.name
        println "artifactId = ${artifactId}"
        while (prj != null) {
            println "prj.name = ${prj.name}"
            println "prj.depth = ${prj.depth}"
            artifactId = "${prj.name}-${artifactId}"
            println "artifactId = ${artifactId}"
            prj = prj.parent
        }
    }
    println "--------- final artifactId = ${artifactId}"
    return artifactId
}

class Npm extends Exec {
    Npm() {
        workingDir project.projectDir
        inputs.dir project.projectDir
        // Add task to the standard build group
        group = BasePlugin.BUILD_GROUP
        def os = System.getProperty('os.name')
        println "Operating System : ${os}"
        if (os.toLowerCase().contains('windows')) {
            executable 'npm.cmd'
        } else {
            executable 'npm'
        }
    }
}

allprojects {
    buildDir = 'target'
    apply plugin: "idea"
    idea {
        module {
            excludeDirs += file( ".gradle" )
            excludeDirs += file( ".idea" )
            excludeDirs += buildDir
            downloadJavadoc = false
            downloadSources = true
            name = project.name
        }
    }
    Properties props = new Properties()
    def versionFile = rootProject.file('version.properties')
    println "rootProject: ${rootProject.name}"

    if(versionFile.exists()) {
        props.load(versionFile.newReader())
        props.each { prop ->
            println "${prop.key}: ${prop.value}"
            project.ext.set(prop.key, prop.value)
        }
    }
}

subprojects {
    buildscript {
        repositories {
            mavenLocal()
            maven { url "https://maven.aliyun.com/repository/gradle-plugin" }
            maven { url "http://repo1.maven.org/maven2" }
        }
    }
    println "subproject.name = ${it.name}"

    ext {
        profile = System.getProperty("profile") ?: "development"
        println "profile = ${profile}"
    }

    if(isSkipProject(it as Project) && !isUIProject(it as Project)) {

    } else if(isUIProject(it as Project)) {
        task npm_install(type: Npm) {
            if (profile == 'production') {
                doFirst {
                    println 'before npm install, delete package-lock.json first'
                    def package_lock_json = file("${project.projectDir}/package-lock.json")
                    println "package_lock_json : ${package_lock_json}"
                    if (package_lock_json.exists()) {
                        package_lock_json.delete()
                    }
                }
            }
            args = ['install', '--no-optional', '--registry=https://registry.npm.taobao.org']
        }

        task run_dev(type: Npm, dependsOn: npm_install) {
            args = ['run', 'dev']
        }

        task rebuild_sass(type: Npm, dependsOn: npm_install) {
            args = ['rebuild', 'node-sass', '--sass-binary-site=https://npm.taobao.org/mirrors/node-sass']
        }

        task build_prod(type: Npm, dependsOn: rebuild_sass) {
            args = ['run', 'build:prod']
        }

        build_prod.mustRunAfter rebuild_sass

        task build_sit(type: Npm) {
            args = ['run', 'build:sit']
        }

    } else {
        apply plugin: 'java'
        apply plugin: 'maven-publish'
        apply plugin: 'signing'
        apply from: 'https://gitee.com/geewit/gradle_publish_sonatype/raw/master/dependency-strategy.gradle'

        repositories {
            mavenLocal()
//            mavenCentral()
            // maven { url "https://maven.aliyun.com/repository/central" }
            maven { url "http://repo1.maven.org/maven2" }
            maven {
                url getReleaseRepositoryUrl()
                credentials {
                    username = getRepositoryUsername()
                    password = getRepositoryPassword()
                }
            }
            maven {
                url getSnapshotRepositoryUrl()
                credentials {
                    username = getRepositoryUsername()
                    password = getRepositoryPassword()
                }
            }
        }

        configurations {
            all { config ->
                config.exclude group: "org.apache.geronimo.specs"
                config.exclude group: "org.jboss.spec.javax.annotation"
                config.exclude group: "org.jboss.spec.javax.servlet"
                config.exclude group: "org.jboss.spec.javax.transaction"
                config.exclude group: "org.jboss.spec.javax.websocket"
                config.exclude group: "org.hibernate.javax.persistence"
                config.exclude group: "org.springframework.boot", module:"spring-boot-starter-logging"
                config.exclude group: "org.springframework.boot", module:"spring-boot-starter-tomcat"
                config.exclude group: "org.apache.tomcat", module:"tomcat-jdbc"
                config.exclude group: "org.apache.tomcat.embed"
                config.exclude group: "org.glassfish.hk2", module:"osgi-resource-locator"
                config.exclude group: "org.glassfish.hk2.external", module:"javax.inject"
                config.exclude group: "com.vaadin.external.google"
                config.exclude group: "com.zaxxer"
                config.exclude group: "org.codehaus.jackson"
                config.exclude group: "org.codehaus.jettison"
                config.exclude group: "org.slf4j", module:"slf4j-log4j12"
                if (profile != 'development') {
                    config.exclude group: "org.springframework.boot", module:"spring-boot-devtools"
                }
                resolutionStrategy.eachDependency { details ->
                    resolutionStrategy(details)
                }
            }
        }

        sourceSets {
            main {
                java {
                    srcDirs = ['src/main/java']
                }
                resources {
                    srcDirs = ['src/main/resources']
                }
            }
            test {
                java {
                    srcDirs = ['src/test/java']
                }
                resources {
                    srcDirs = ['src/test/resources']
                }
            }
        }

        tasks.withType(JavaCompile) {
            sourceCompatibility = JavaVersion.VERSION_1_8
            targetCompatibility = JavaVersion.VERSION_1_8

            options*.compilerArgs << "-Xlint:unchecked" << "-Xlint:options"
            options*.encoding = StandardCharsets.UTF_8.name()
        }

//        tasks.withType(Javadoc) {
//            options*.encoding = StandardCharsets.UTF_8.name()
//        }

        task sources(type: Jar) {
            classifier = 'sources'
            from sourceSets.main.allSource
        }

//        task javadocs(type: Jar, dependsOn: javadoc) {
//            classifier = 'javadoc'
//            from javadoc.destinationDir
//        }

        artifacts {
            archives jar
            archives sources
//            archives javadocs
        }

        repositories {
            mavenLocal()
            maven { url "https://maven.aliyun.com/repository/central" }
            maven { url "http://repo1.maven.org/maven2" }
            maven {
                name = 'nexusRepository'
                url = getRepositoryUrl(project)
                credentials {
                    username = getRepositoryUsername()
                    password = getRepositoryPassword()
                }
            }
        }

        // https://docs.gradle.org/current/dsl/org.gradle.api.publish.maven.MavenPublication.html
        publishing {
            publications {
                maven(MavenPublication) {
                    def thisGroupId = groupId(project)
                    def thisArtifactId = artifactId(project)

                    groupId thisGroupId
                    artifactId thisArtifactId
                    version "${version}"
                    println "artifact: ${thisGroupId}:${thisArtifactId}:${version}"
                    from components.java
//                    artifact javadocs
                    artifact sources

                    pom {
                        name = POM_ARTIFACT_ID
                        description = POM_DESCRIPTION
                        url = POM_SCM_URL
                        licenses {
                            license {
                                name = POM_LICENCE_NAME
                                url = POM_LICENCE_URL
                            }
                        }
                        developers {
                            developer {
                                id = POM_DEVELOPER_ID
                                name = POM_DEVELOPER_NAME
                                email = POM_DEVELOPER_EMAIL
                            }
                        }
                        scm {
                            url = POM_SCM_URL
                            connection = POM_SCM_CONNECTION
                            developerConnection = POM_SCM_DEV_CONNECTION
                        }
                    }
                }
            }
            repositories {
                maven {
                    name = 'sonatypeRepository'
                    url = getRepositoryUrl(project)
                    credentials {
                        username = getRepositoryUsername()
                        password = getRepositoryPassword()
                    }
                }
            }
        }

        signing {
            sign publishing.publications.maven
        }
    }
}

def getRepositoryUrl(Project project) {
    return isSnapshotBuild(project) ? getSnapshotRepositoryUrl() : getReleaseRepositoryUrl()
}

def isSnapshotBuild(Project project) {
    println "project.version : ${project.version}"
    return project.version.endsWith('SNAPSHOT')
}

def getReleaseRepositoryUrl() {
    def property_default_key = 'REPOSITORY_RELEASE_URL'
    def property_key = 'REPOSITORY_RELEASE_URL_KEY'
    def RELEASE_REPOSITORY_URL_KEY = hasProperty(property_key) ? getProperty(property_key) : property_default_key
    def releaseRepositoryUrl = hasProperty(RELEASE_REPOSITORY_URL_KEY) ? getProperty(RELEASE_REPOSITORY_URL_KEY)
            : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
    println "releaseRepositoryUrl:" + releaseRepositoryUrl
    return releaseRepositoryUrl
}

def getSnapshotRepositoryUrl() {
    def property_default_key = 'REPOSITORY_SNAPSHOT_URL'
    def property_key = 'REPOSITORY_SNAPSHOT_URL_KEY'
    def SNAPSHOT_REPOSITORY_URL_KEY = hasProperty(property_key) ? getProperty(property_key) : property_default_key
    def snapshotRepositoryUrl =  hasProperty(SNAPSHOT_REPOSITORY_URL_KEY) ? getProperty(SNAPSHOT_REPOSITORY_URL_KEY)
            : "https://oss.sonatype.org/content/repositories/snapshots/"
    println "snapshotRepositoryUrl:" + snapshotRepositoryUrl
    return snapshotRepositoryUrl
}

def getRepositoryUsername() {
    def property_default_key = 'REPOSITORY_USERNAME'
    def property_key = 'REPOSITORY_USERNAME_KEY'
    def SONATYPE_USERNAME_KEY = hasProperty(property_key) ? getProperty(property_key) : property_default_key
    def username = hasProperty(SONATYPE_USERNAME_KEY) ? getProperty(SONATYPE_USERNAME_KEY) : ""
    println "username:" + username
    return username
}

def getRepositoryPassword() {
    def property_default_key = 'REPOSITORY_PASSWORD'
    def property_key = 'REPOSITORY_PASSWORD_KEY'
    def SONATYPE_PASSWORD_KEY = hasProperty(property_key) ? getProperty(property_key) : property_default_key
    def password = hasProperty(SONATYPE_PASSWORD_KEY) ? getProperty(SONATYPE_PASSWORD_KEY) : ""
    println "password:" + password
    return password
}
